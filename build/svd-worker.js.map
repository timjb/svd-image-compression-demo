{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","svd-worker.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","svd","m","approx","d","Math","min","sizeof_double","buf","Module","HEAPU8","buffer","ptr_a","_malloc","arr_a","Float64Array","ptr_u","arr_u","ptr_s","arr_s","ptr_vt","arr_vt","timerName","round","random","console","time","svd_simple_approx","svd_simple","timeEnd","s","vt","postMessage","_free","importScripts","input","log","onmessage","msg","data","cwrap"],"mappings":"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","file":"svd-worker.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// <reference path=\"../../node_modules/@types/emscripten/index.d.ts\" />\n\nimport protocol = require('../shared/svd-worker-protocol');\n\nimportScripts('../build/clapack.js');\n\nlet input: null | {\n  a: Float64Array,\n  m: number,\n  n: number\n} = null;\n\nconsole.log(\"worker started!\");\n\nonmessage = function(msg: any) {\n  var data = msg.data as protocol.WorkerReq;\n  if (data.msg === \"set-input\") {\n    input = { a: new Float64Array(data.a), m: data.m, n: data.n };\n  } else if (data.msg === \"compute-svd\") {\n    if (!input) { throw new Error('set-input must come first!'); }\n    svd(input.a, input.m, input.n, data.approx);\n  } else {\n    throw new Error('unrecognized command!');\n  }\n};\n\ntype ptr = number;\n\nconst svd_simple: (m: number, n: number, A: ptr, U: ptr, S: ptr, Vt: ptr) => number =\n  Module.cwrap('svd_simple', 'number', ['number', 'number', 'number', 'number', 'number', 'number']);\nconst svd_simple_approx: (m: number, n: number, t: number, A: ptr, U: ptr, S: ptr, Vt: ptr) => number =\n  Module.cwrap('svd_simple_approx', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n\nfunction svd (a: Float64Array, m: number, n: number, approx: boolean) {\n  const d = approx ? Math.min(Math.min(m, n), 50) : Math.min(m, n);\n  const sizeof_double = 8;\n  const buf = Module.HEAPU8.buffer;\n\n  const ptr_a  = Module._malloc(m * n * sizeof_double);\n  const arr_a  = new Float64Array(buf, ptr_a, m * n);\n  const ptr_u  = Module._malloc(m * d * sizeof_double);\n  const arr_u  = new Float64Array(buf, ptr_u, m * d);\n  const ptr_s  = Module._malloc(d *     sizeof_double);\n  const arr_s  = new Float64Array(buf, ptr_s, d);\n  const ptr_vt = Module._malloc(d * n * sizeof_double);\n  const arr_vt = new Float64Array(buf, ptr_vt, d * n);\n\n  for (let i = 0; i < a.length; i++) { arr_a[i] = a[i]; }\n\n  const timerName = \"svd\" + (Math.round(Math.random() * 100)) + \" approx:\" + (approx ? \"yes\" : \"no\");\n  console.time(timerName);\n  if (approx) {\n    svd_simple_approx(m, n, d, ptr_a, ptr_u, ptr_s, ptr_vt);\n  } else {\n    svd_simple(m, n, ptr_a, ptr_u, ptr_s, ptr_vt);\n  }\n  console.timeEnd(timerName);\n  \n  const svd: protocol.WorkerRes = { u: arr_u, s: arr_s, vt: arr_vt, d: d, m: m, n: n };\n  postMessage(svd);\n  \n  Module._free(ptr_a);\n  Module._free(ptr_u);\n  Module._free(ptr_s);\n  Module._free(ptr_vt);\n}\n"]}