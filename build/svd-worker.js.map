{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","svd-worker.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","self","importScripts","input","console","log","svd_simple","Module","cwrap","svd_simple_approx","onmessage","event","data","msg","Float64Array","m","approx","d","Math","min","buf","HEAPU8","buffer","ptr_a","_malloc","arr_a","ptr_u","arr_u","ptr_s","arr_s","ptr_vt","arr_vt","timerName","round","random","time","timeEnd","postMessage","s","vt","_free","svd"],"mappings":"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","file":"svd-worker.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* eslint-disable @typescript-eslint/camelcase */\n\n/// <reference types=\"emscripten\" />\n\nimport protocol = require(\"../shared/svd-worker-protocol\");\n\nself.importScripts(\"../build/clapack.js\");\n\nlet input: null | {\n  a: Float64Array;\n  m: number;\n  n: number;\n} = null;\n\nconsole.log(\"worker started!\");\n\ntype ptr = number;\n\nconst svd_simple: (\n  m: number,\n  n: number,\n  A: ptr,\n  U: ptr,\n  S: ptr,\n  Vt: ptr,\n) => number = Module.cwrap(\"svd_simple\", \"number\", [\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n]);\nconst svd_simple_approx: (\n  m: number,\n  n: number,\n  t: number,\n  A: ptr,\n  U: ptr,\n  S: ptr,\n  Vt: ptr,\n) => number = Module.cwrap(\"svd_simple_approx\", \"number\", [\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n]);\n\nfunction svd(a: Float64Array, m: number, n: number, approx: boolean): void {\n  const d = approx ? Math.min(Math.min(m, n), 50) : Math.min(m, n);\n  const sizeof_double = 8;\n  const buf = Module.HEAPU8.buffer;\n\n  const ptr_a = Module._malloc(m * n * sizeof_double);\n  const arr_a = new Float64Array(buf, ptr_a, m * n);\n  const ptr_u = Module._malloc(m * d * sizeof_double);\n  const arr_u = new Float64Array(buf, ptr_u, m * d);\n  const ptr_s = Module._malloc(d * sizeof_double);\n  const arr_s = new Float64Array(buf, ptr_s, d);\n  const ptr_vt = Module._malloc(d * n * sizeof_double);\n  const arr_vt = new Float64Array(buf, ptr_vt, d * n);\n\n  for (let i = 0; i < a.length; i++) {\n    arr_a[i] = a[i];\n  }\n\n  const timerName = \"svd\" + Math.round(Math.random() * 100) + \" approx:\" + (approx ? \"yes\" : \"no\");\n  console.time(timerName);\n  if (approx) {\n    svd_simple_approx(m, n, d, ptr_a, ptr_u, ptr_s, ptr_vt);\n  } else {\n    svd_simple(m, n, ptr_a, ptr_u, ptr_s, ptr_vt);\n  }\n  console.timeEnd(timerName);\n\n  const svd: protocol.WorkerRes = { u: arr_u, s: arr_s, vt: arr_vt, d: d, m: m, n: n };\n  postMessage(svd);\n\n  Module._free(ptr_a);\n  Module._free(ptr_u);\n  Module._free(ptr_s);\n  Module._free(ptr_vt);\n}\n\nonmessage = (event: MessageEvent): void => {\n  const data = event.data as protocol.WorkerReq;\n  if (data.msg === \"set-input\") {\n    input = { a: new Float64Array(data.a), m: data.m, n: data.n };\n  } else if (data.msg === \"compute-svd\") {\n    if (!input) {\n      throw new Error(\"set-input must come first!\");\n    }\n    svd(input.a, input.m, input.n, data.approx);\n  } else {\n    throw new Error(\"unrecognized command!\");\n  }\n};\n"]}