{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","svd-worker.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","importScripts","input","console","log","onmessage","msg","data","Float64Array","m","approx","d","Math","min","buf","Module","HEAPU8","buffer","ptr_a","_malloc","arr_a","ptr_u","arr_u","ptr_s","arr_s","ptr_vt","arr_vt","timerName","round","random","time","svd_simple_approx","svd_simple","timeEnd","postMessage","s","vt","_free","svd","cwrap"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,iECIAK,cAAc,uBAEd,IAAIC,EAIA,KAEJC,QAAQC,IAAI,mBAEZC,UAAY,SAASC,GACnB,IAAIC,EAAOD,EAAIC,KACf,GAAiB,cAAbA,EAAKD,IACPJ,EAAQ,CAAEV,EAAG,IAAIgB,aAAaD,EAAKf,GAAIiB,EAAGF,EAAKE,EAAGzB,EAAGuB,EAAKvB,OACrD,CAAA,GAAiB,gBAAbuB,EAAKD,IAId,MAAM,IAAIb,MAAM,yBAHhB,IAAKS,EAAS,MAAM,IAAIT,MAAM,+BAclC,SAAcD,EAAiBiB,EAAWzB,EAAW0B,GAcnD,IAbA,IAAMC,EAAID,EAASE,KAAKC,IAAID,KAAKC,IAAIJ,EAAGzB,GAAI,IAAM4B,KAAKC,IAAIJ,EAAGzB,GAExD8B,EAAMC,OAAOC,OAAOC,OAEpBC,EAASH,OAAOI,QAAQV,EAAIzB,EAHZ,GAIhBoC,EAAS,IAAIZ,aAAaM,EAAKI,EAAOT,EAAIzB,GAC1CqC,EAASN,OAAOI,QAAQV,EAAIE,EALZ,GAMhBW,EAAS,IAAId,aAAaM,EAAKO,EAAOZ,EAAIE,GAC1CY,EAASR,OAAOI,QAPA,EAOQR,GACxBa,EAAS,IAAIhB,aAAaM,EAAKS,EAAOZ,GACtCc,EAASV,OAAOI,QAAQR,EAAI3B,EATZ,GAUhB0C,EAAS,IAAIlB,aAAaM,EAAKW,EAAQd,EAAI3B,GAExCG,EAAI,EAAGA,EAAIK,EAAEM,OAAQX,IAAOiC,EAAMjC,GAAKK,EAAEL,GAElD,IAAMwC,EAAY,MAASf,KAAKgB,MAAsB,IAAhBhB,KAAKiB,UAAmB,YAAcnB,EAAS,MAAQ,MAC7FP,QAAQ2B,KAAKH,GACTjB,EACFqB,EAAkBtB,EAAGzB,EAAG2B,EAAGO,EAAOG,EAAOE,EAAOE,GAEhDO,EAAWvB,EAAGzB,EAAGkC,EAAOG,EAAOE,EAAOE,GAExCtB,QAAQ8B,QAAQN,GAGhBO,YADgC,CAAE3C,EAAG+B,EAAOa,EAAGX,EAAOY,GAAIV,EAAQf,EAAGA,EAAGF,EAAGA,EAAGzB,EAAGA,IAGjF+B,OAAOsB,MAAMnB,GACbH,OAAOsB,MAAMhB,GACbN,OAAOsB,MAAMd,GACbR,OAAOsB,MAAMZ,GA5CXa,CAAIpC,EAAMV,EAAGU,EAAMO,EAAGP,EAAMlB,EAAGuB,EAAKG,UAQxC,IAAMsB,EACJjB,OAAOwB,MAAM,aAAc,SAAU,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,WACpFR,EACJhB,OAAOwB,MAAM,oBAAqB,SAAU,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU","file":"svd-worker.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// <reference path=\"../../node_modules/@types/emscripten/index.d.ts\" />\n\nimport protocol = require('../shared/svd-worker-protocol');\n\nimportScripts('../build/clapack.js');\n\nlet input: null | {\n  a: Float64Array,\n  m: number,\n  n: number\n} = null;\n\nconsole.log(\"worker started!\");\n\nonmessage = function(msg: any) {\n  var data = msg.data as protocol.WorkerReq;\n  if (data.msg === \"set-input\") {\n    input = { a: new Float64Array(data.a), m: data.m, n: data.n };\n  } else if (data.msg === \"compute-svd\") {\n    if (!input) { throw new Error('set-input must come first!'); }\n    svd(input.a, input.m, input.n, data.approx);\n  } else {\n    throw new Error('unrecognized command!');\n  }\n};\n\ntype ptr = number;\n\nconst svd_simple: (m: number, n: number, A: ptr, U: ptr, S: ptr, Vt: ptr) => number =\n  Module.cwrap('svd_simple', 'number', ['number', 'number', 'number', 'number', 'number', 'number']);\nconst svd_simple_approx: (m: number, n: number, t: number, A: ptr, U: ptr, S: ptr, Vt: ptr) => number =\n  Module.cwrap('svd_simple_approx', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n\nfunction svd (a: Float64Array, m: number, n: number, approx: boolean) {\n  const d = approx ? Math.min(Math.min(m, n), 50) : Math.min(m, n);\n  const sizeof_double = 8;\n  const buf = Module.HEAPU8.buffer;\n\n  const ptr_a  = Module._malloc(m * n * sizeof_double);\n  const arr_a  = new Float64Array(buf, ptr_a, m * n);\n  const ptr_u  = Module._malloc(m * d * sizeof_double);\n  const arr_u  = new Float64Array(buf, ptr_u, m * d);\n  const ptr_s  = Module._malloc(d *     sizeof_double);\n  const arr_s  = new Float64Array(buf, ptr_s, d);\n  const ptr_vt = Module._malloc(d * n * sizeof_double);\n  const arr_vt = new Float64Array(buf, ptr_vt, d * n);\n\n  for (let i = 0; i < a.length; i++) { arr_a[i] = a[i]; }\n\n  const timerName = \"svd\" + (Math.round(Math.random() * 100)) + \" approx:\" + (approx ? \"yes\" : \"no\");\n  console.time(timerName);\n  if (approx) {\n    svd_simple_approx(m, n, d, ptr_a, ptr_u, ptr_s, ptr_vt);\n  } else {\n    svd_simple(m, n, ptr_a, ptr_u, ptr_s, ptr_vt);\n  }\n  console.timeEnd(timerName);\n  \n  const svd: protocol.WorkerRes = { u: arr_u, s: arr_s, vt: arr_vt, d: d, m: m, n: n };\n  postMessage(svd);\n  \n  Module._free(ptr_a);\n  Module._free(ptr_u);\n  Module._free(ptr_s);\n  Module._free(ptr_vt);\n}\n"]}