{"version":3,"sources":["webpack://svd-image-compression-demo/./src/web-worker/svd-worker.ts","webpack://svd-image-compression-demo/webpack/bootstrap","webpack://svd-image-compression-demo/webpack/startup"],"names":["self","importScripts","input","console","log","svd_simple","Module","cwrap","svd_simple_approx","onmessage","event","data","msg","a","Float64Array","m","n","Error","approx","d","Math","min","buf","HEAPU8","buffer","ptr_a","_malloc","arr_a","ptr_u","arr_u","ptr_s","arr_s","ptr_vt","arr_vt","i","length","timerName","round","random","time","timeEnd","postMessage","u","s","vt","_free","svd","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__"],"mappings":"qCAIAA,KAAKC,cAAc,uBAEnB,IAAIC,EAIA,KAEJC,QAAQC,IAAI,mBAIZ,IAAMC,EAOQC,OAAOC,MAAM,aAAc,SAAU,CACjD,SACA,SACA,SACA,SACA,SACA,WAEIC,EAQQF,OAAOC,MAAM,oBAAqB,SAAU,CACxD,SACA,SACA,SACA,SACA,SACA,SACA,WAuCFE,UAAY,SAACC,GACX,IAAMC,EAAOD,EAAMC,KACnB,GAAiB,cAAbA,EAAKC,IACPV,EAAQ,CAAEW,EAAG,IAAIC,aAAaH,EAAKE,GAAIE,EAAGJ,EAAKI,EAAGC,EAAGL,EAAKK,OACrD,IAAiB,gBAAbL,EAAKC,IAMd,MAAM,IAAIK,MAAM,yBALhB,IAAKf,EACH,MAAM,IAAIe,MAAM,+BA1CtB,SAAaJ,EAAiBE,EAAWC,EAAWE,GAclD,IAbA,IAAMC,EAAID,EAASE,KAAKC,IAAID,KAAKC,IAAIN,EAAGC,GAAI,IAAMI,KAAKC,IAAIN,EAAGC,GAExDM,EAAMhB,OAAOiB,OAAOC,OAEpBC,EAAQnB,OAAOoB,QAAQX,EAAIC,EAHX,GAIhBW,EAAQ,IAAIb,aAAaQ,EAAKG,EAAOV,EAAIC,GACzCY,EAAQtB,OAAOoB,QAAQX,EAAII,EALX,GAMhBU,EAAQ,IAAIf,aAAaQ,EAAKM,EAAOb,EAAII,GACzCW,EAAQxB,OAAOoB,QAPC,EAOOP,GACvBY,EAAQ,IAAIjB,aAAaQ,EAAKQ,EAAOX,GACrCa,EAAS1B,OAAOoB,QAAQP,EAAIH,EATZ,GAUhBiB,EAAS,IAAInB,aAAaQ,EAAKU,EAAQb,EAAIH,GAExCkB,EAAI,EAAGA,EAAIrB,EAAEsB,OAAQD,IAC5BP,EAAMO,GAAKrB,EAAEqB,GAGf,IAAME,EAAY,MAAQhB,KAAKiB,MAAsB,IAAhBjB,KAAKkB,UAAkB,YAAcpB,EAAS,MAAQ,MAC3Ff,QAAQoC,KAAKH,GACTlB,EACFV,EAAkBO,EAAGC,EAAGG,EAAGM,EAAOG,EAAOE,EAAOE,GAEhD3B,EAAWU,EAAGC,EAAGS,EAAOG,EAAOE,EAAOE,GAExC7B,QAAQqC,QAAQJ,GAGhBK,YADgC,CAAEC,EAAGb,EAAOc,EAAGZ,EAAOa,GAAIX,EAAQd,EAAGA,EAAGJ,EAAGA,EAAGC,EAAGA,IAGjFV,OAAOuC,MAAMpB,GACbnB,OAAOuC,MAAMjB,GACbtB,OAAOuC,MAAMf,GACbxB,OAAOuC,MAAMb,GAWXc,CAAI5C,EAAMW,EAAGX,EAAMa,EAAGb,EAAMc,EAAGL,EAAKO,YC5FpC6B,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,QClBfF,CAAoB,K","file":"svd-worker.worker.js","sourcesContent":["/// <reference types=\"emscripten\" />\n\nimport * as protocol from \"../shared/svd-worker-protocol\";\n\nself.importScripts(\"../build/clapack.js\");\n\nlet input: null | {\n  a: Float64Array;\n  m: number;\n  n: number;\n} = null;\n\nconsole.log(\"worker started!\");\n\ntype ptr = number;\n\nconst svd_simple: (\n  m: number,\n  n: number,\n  A: ptr,\n  U: ptr,\n  S: ptr,\n  Vt: ptr,\n) => number = Module.cwrap(\"svd_simple\", \"number\", [\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n]);\nconst svd_simple_approx: (\n  m: number,\n  n: number,\n  t: number,\n  A: ptr,\n  U: ptr,\n  S: ptr,\n  Vt: ptr,\n) => number = Module.cwrap(\"svd_simple_approx\", \"number\", [\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n  \"number\",\n]);\n\nfunction svd(a: Float64Array, m: number, n: number, approx: boolean): void {\n  const d = approx ? Math.min(Math.min(m, n), 50) : Math.min(m, n);\n  const sizeof_double = 8;\n  const buf = Module.HEAPU8.buffer;\n\n  const ptr_a = Module._malloc(m * n * sizeof_double);\n  const arr_a = new Float64Array(buf, ptr_a, m * n);\n  const ptr_u = Module._malloc(m * d * sizeof_double);\n  const arr_u = new Float64Array(buf, ptr_u, m * d);\n  const ptr_s = Module._malloc(d * sizeof_double);\n  const arr_s = new Float64Array(buf, ptr_s, d);\n  const ptr_vt = Module._malloc(d * n * sizeof_double);\n  const arr_vt = new Float64Array(buf, ptr_vt, d * n);\n\n  for (let i = 0; i < a.length; i++) {\n    arr_a[i] = a[i];\n  }\n\n  const timerName = \"svd\" + Math.round(Math.random() * 100) + \" approx:\" + (approx ? \"yes\" : \"no\");\n  console.time(timerName);\n  if (approx) {\n    svd_simple_approx(m, n, d, ptr_a, ptr_u, ptr_s, ptr_vt);\n  } else {\n    svd_simple(m, n, ptr_a, ptr_u, ptr_s, ptr_vt);\n  }\n  console.timeEnd(timerName);\n\n  const svd: protocol.WorkerRes = { u: arr_u, s: arr_s, vt: arr_vt, d: d, m: m, n: n };\n  postMessage(svd);\n\n  Module._free(ptr_a);\n  Module._free(ptr_u);\n  Module._free(ptr_s);\n  Module._free(ptr_vt);\n}\n\nonmessage = (event: MessageEvent): void => {\n  const data = event.data as protocol.WorkerReq;\n  if (data.msg === \"set-input\") {\n    input = { a: new Float64Array(data.a), m: data.m, n: data.n };\n  } else if (data.msg === \"compute-svd\") {\n    if (!input) {\n      throw new Error(\"set-input must come first!\");\n    }\n    svd(input.a, input.m, input.n, data.approx);\n  } else {\n    throw new Error(\"unrecognized command!\");\n  }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n__webpack_require__(87);\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}